// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/fadliarz/distributed-faas/services/function-service/domain/domain-core"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/fadliarz/distributed-faas/services/function-service/infrastructure/repository"
)

// MockFunctionDataAccessMapper is an autogenerated mock type for the FunctionDataAccessMapper type
type MockFunctionDataAccessMapper struct {
	mock.Mock
}

type MockFunctionDataAccessMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFunctionDataAccessMapper) EXPECT() *MockFunctionDataAccessMapper_Expecter {
	return &MockFunctionDataAccessMapper_Expecter{mock: &_m.Mock}
}

// Domain provides a mock function with given fields: function
func (_m *MockFunctionDataAccessMapper) Domain(function repository.FunctionEntity) *domain.Function {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for Domain")
	}

	var r0 *domain.Function
	if rf, ok := ret.Get(0).(func(repository.FunctionEntity) *domain.Function); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Function)
		}
	}

	return r0
}

// MockFunctionDataAccessMapper_Domain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Domain'
type MockFunctionDataAccessMapper_Domain_Call struct {
	*mock.Call
}

// Domain is a helper method to define mock.On call
//   - function repository.FunctionEntity
func (_e *MockFunctionDataAccessMapper_Expecter) Domain(function interface{}) *MockFunctionDataAccessMapper_Domain_Call {
	return &MockFunctionDataAccessMapper_Domain_Call{Call: _e.mock.On("Domain", function)}
}

func (_c *MockFunctionDataAccessMapper_Domain_Call) Run(run func(function repository.FunctionEntity)) *MockFunctionDataAccessMapper_Domain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.FunctionEntity))
	})
	return _c
}

func (_c *MockFunctionDataAccessMapper_Domain_Call) Return(_a0 *domain.Function) *MockFunctionDataAccessMapper_Domain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctionDataAccessMapper_Domain_Call) RunAndReturn(run func(repository.FunctionEntity) *domain.Function) *MockFunctionDataAccessMapper_Domain_Call {
	_c.Call.Return(run)
	return _c
}

// Entity provides a mock function with given fields: function
func (_m *MockFunctionDataAccessMapper) Entity(function *domain.Function) (*repository.FunctionEntity, error) {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for Entity")
	}

	var r0 *repository.FunctionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Function) (*repository.FunctionEntity, error)); ok {
		return rf(function)
	}
	if rf, ok := ret.Get(0).(func(*domain.Function) *repository.FunctionEntity); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.FunctionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Function) error); ok {
		r1 = rf(function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFunctionDataAccessMapper_Entity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entity'
type MockFunctionDataAccessMapper_Entity_Call struct {
	*mock.Call
}

// Entity is a helper method to define mock.On call
//   - function *domain.Function
func (_e *MockFunctionDataAccessMapper_Expecter) Entity(function interface{}) *MockFunctionDataAccessMapper_Entity_Call {
	return &MockFunctionDataAccessMapper_Entity_Call{Call: _e.mock.On("Entity", function)}
}

func (_c *MockFunctionDataAccessMapper_Entity_Call) Run(run func(function *domain.Function)) *MockFunctionDataAccessMapper_Entity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Function))
	})
	return _c
}

func (_c *MockFunctionDataAccessMapper_Entity_Call) Return(_a0 *repository.FunctionEntity, _a1 error) *MockFunctionDataAccessMapper_Entity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFunctionDataAccessMapper_Entity_Call) RunAndReturn(run func(*domain.Function) (*repository.FunctionEntity, error)) *MockFunctionDataAccessMapper_Entity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFunctionDataAccessMapper creates a new instance of MockFunctionDataAccessMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFunctionDataAccessMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFunctionDataAccessMapper {
	mock := &MockFunctionDataAccessMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
