// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	application "github.com/fadliarz/distributed-faas/services/function-service/domain/application-service"
	domain "github.com/fadliarz/distributed-faas/services/function-service/domain/domain-core"

	mock "github.com/stretchr/testify/mock"
)

// MockDataMapper is an autogenerated mock type for the DataMapper type
type MockDataMapper struct {
	mock.Mock
}

type MockDataMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataMapper) EXPECT() *MockDataMapper_Expecter {
	return &MockDataMapper_Expecter{mock: &_m.Mock}
}

// CreateFunctionCommandToFunction provides a mock function with given fields: cmd
func (_m *MockDataMapper) CreateFunctionCommandToFunction(cmd *application.CreateFunctionCommand) (*domain.Function, error) {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionCommandToFunction")
	}

	var r0 *domain.Function
	var r1 error
	if rf, ok := ret.Get(0).(func(*application.CreateFunctionCommand) (*domain.Function, error)); ok {
		return rf(cmd)
	}
	if rf, ok := ret.Get(0).(func(*application.CreateFunctionCommand) *domain.Function); ok {
		r0 = rf(cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Function)
		}
	}

	if rf, ok := ret.Get(1).(func(*application.CreateFunctionCommand) error); ok {
		r1 = rf(cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataMapper_CreateFunctionCommandToFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionCommandToFunction'
type MockDataMapper_CreateFunctionCommandToFunction_Call struct {
	*mock.Call
}

// CreateFunctionCommandToFunction is a helper method to define mock.On call
//   - cmd *application.CreateFunctionCommand
func (_e *MockDataMapper_Expecter) CreateFunctionCommandToFunction(cmd interface{}) *MockDataMapper_CreateFunctionCommandToFunction_Call {
	return &MockDataMapper_CreateFunctionCommandToFunction_Call{Call: _e.mock.On("CreateFunctionCommandToFunction", cmd)}
}

func (_c *MockDataMapper_CreateFunctionCommandToFunction_Call) Run(run func(cmd *application.CreateFunctionCommand)) *MockDataMapper_CreateFunctionCommandToFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*application.CreateFunctionCommand))
	})
	return _c
}

func (_c *MockDataMapper_CreateFunctionCommandToFunction_Call) Return(_a0 *domain.Function, _a1 error) *MockDataMapper_CreateFunctionCommandToFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataMapper_CreateFunctionCommandToFunction_Call) RunAndReturn(run func(*application.CreateFunctionCommand) (*domain.Function, error)) *MockDataMapper_CreateFunctionCommandToFunction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataMapper creates a new instance of MockDataMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataMapper {
	mock := &MockDataMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
