// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: function-service/v1/api.proto

package function_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FunctionService_CreateFunction_FullMethodName                = "/fadliarz.distributed_faas.function_service.v1.FunctionService/CreateFunction"
	FunctionService_GetFunctionUploadPresignedURL_FullMethodName = "/fadliarz.distributed_faas.function_service.v1.FunctionService/GetFunctionUploadPresignedURL"
	FunctionService_UpdateFunctionSourceCodeURL_FullMethodName   = "/fadliarz.distributed_faas.function_service.v1.FunctionService/UpdateFunctionSourceCodeURL"
)

// FunctionServiceClient is the client API for FunctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionServiceClient interface {
	CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error)
	GetFunctionUploadPresignedURL(ctx context.Context, in *GetFunctionUploadPresignedURLRequest, opts ...grpc.CallOption) (*GetFunctionUploadPresignedURLResponse, error)
	UpdateFunctionSourceCodeURL(ctx context.Context, in *UpdateFunctionSourceCodeURLRequest, opts ...grpc.CallOption) (*UpdateFunctionSourceCodeURLResponse, error)
}

type functionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionServiceClient(cc grpc.ClientConnInterface) FunctionServiceClient {
	return &functionServiceClient{cc}
}

func (c *functionServiceClient) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFunctionResponse)
	err := c.cc.Invoke(ctx, FunctionService_CreateFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceClient) GetFunctionUploadPresignedURL(ctx context.Context, in *GetFunctionUploadPresignedURLRequest, opts ...grpc.CallOption) (*GetFunctionUploadPresignedURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionUploadPresignedURLResponse)
	err := c.cc.Invoke(ctx, FunctionService_GetFunctionUploadPresignedURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceClient) UpdateFunctionSourceCodeURL(ctx context.Context, in *UpdateFunctionSourceCodeURLRequest, opts ...grpc.CallOption) (*UpdateFunctionSourceCodeURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFunctionSourceCodeURLResponse)
	err := c.cc.Invoke(ctx, FunctionService_UpdateFunctionSourceCodeURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionServiceServer is the server API for FunctionService service.
// All implementations must embed UnimplementedFunctionServiceServer
// for forward compatibility.
type FunctionServiceServer interface {
	CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error)
	GetFunctionUploadPresignedURL(context.Context, *GetFunctionUploadPresignedURLRequest) (*GetFunctionUploadPresignedURLResponse, error)
	UpdateFunctionSourceCodeURL(context.Context, *UpdateFunctionSourceCodeURLRequest) (*UpdateFunctionSourceCodeURLResponse, error)
	mustEmbedUnimplementedFunctionServiceServer()
}

// UnimplementedFunctionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFunctionServiceServer struct{}

func (UnimplementedFunctionServiceServer) CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedFunctionServiceServer) GetFunctionUploadPresignedURL(context.Context, *GetFunctionUploadPresignedURLRequest) (*GetFunctionUploadPresignedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionUploadPresignedURL not implemented")
}
func (UnimplementedFunctionServiceServer) UpdateFunctionSourceCodeURL(context.Context, *UpdateFunctionSourceCodeURLRequest) (*UpdateFunctionSourceCodeURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunctionSourceCodeURL not implemented")
}
func (UnimplementedFunctionServiceServer) mustEmbedUnimplementedFunctionServiceServer() {}
func (UnimplementedFunctionServiceServer) testEmbeddedByValue()                         {}

// UnsafeFunctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionServiceServer will
// result in compilation errors.
type UnsafeFunctionServiceServer interface {
	mustEmbedUnimplementedFunctionServiceServer()
}

func RegisterFunctionServiceServer(s grpc.ServiceRegistrar, srv FunctionServiceServer) {
	// If the following call pancis, it indicates UnimplementedFunctionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FunctionService_ServiceDesc, srv)
}

func _FunctionService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionService_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceServer).CreateFunction(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionService_GetFunctionUploadPresignedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionUploadPresignedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceServer).GetFunctionUploadPresignedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionService_GetFunctionUploadPresignedURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceServer).GetFunctionUploadPresignedURL(ctx, req.(*GetFunctionUploadPresignedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionService_UpdateFunctionSourceCodeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFunctionSourceCodeURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceServer).UpdateFunctionSourceCodeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FunctionService_UpdateFunctionSourceCodeURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceServer).UpdateFunctionSourceCodeURL(ctx, req.(*UpdateFunctionSourceCodeURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionService_ServiceDesc is the grpc.ServiceDesc for FunctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fadliarz.distributed_faas.function_service.v1.FunctionService",
	HandlerType: (*FunctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFunction",
			Handler:    _FunctionService_CreateFunction_Handler,
		},
		{
			MethodName: "GetFunctionUploadPresignedURL",
			Handler:    _FunctionService_GetFunctionUploadPresignedURL_Handler,
		},
		{
			MethodName: "UpdateFunctionSourceCodeURL",
			Handler:    _FunctionService_UpdateFunctionSourceCodeURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "function-service/v1/api.proto",
}
